// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Base User model for authentication and basic profile
model User {
  id                Int               @id @default(autoincrement())
  email             String            @unique
  password          String?
  name              String
  username          String?           @unique
  avatar            String?
  role              Role              @default(USER)
  isVerified        Boolean           @default(false)
  emailVerified     DateTime?
  
  // Common user data
  joinedAt          DateTime          @default(now())
  lastActive        DateTime          @default(now())
  
  // Relations
  sellerProfile     SellerProfile?
  purchases         Order[]           @relation("Buyer")
  reviewsGiven      Review[]          @relation("ReviewGiver")
  messagesSent      Message[]         @relation("MessageSender")
  messagesReceived  Message[]         @relation("MessageReceiver")
  favorites         Favorite[]
  notifications     Notification[]
  settings          Settings?
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

// Separate model for seller-specific information
model SellerProfile {
  id                Int               @id @default(autoincrement())
  userId            Int               @unique
  user              User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Seller-specific fields
  bio               String?           @db.Text
  location          String?
  sellerRating      Float?
  totalSales        Int               @default(0)
  responseRate      Float?            @default(0)
  responseTime      Int?              // Average response time in minutes
  completedOrders   Int               @default(0)
  cancellationRate  Float?            @default(0)
  balance           Decimal           @default(0) @db.Decimal(10, 2)
  
  // Relations
  listings          Listing[]
  sales             Order[]           @relation("Seller")
  reviewsReceived   Review[]          @relation("ReviewReceiver")
  
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
}

enum Role {
  USER
  SELLER
  ADMIN
}

// Category model for organizing listings
model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  slug        String    @unique
  description String?   @db.Text
  icon        String?
  
  // Relations
  listings    Listing[]
  
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Listing model for products being sold
model Listing {
  id              Int           @id @default(autoincrement())
  title           String
  description     String        @db.Text
  price           Decimal       @db.Decimal(10, 2)
  originalPrice   Decimal?      @db.Decimal(10, 2)
  status          ListingStatus @default(ACTIVE)
  featured        Boolean       @default(false)
  slug            String        @unique
  
  // New fields for enhanced product information
  features        Json          // Stored as JSON array of feature strings
  productInfo     Json          // Stored as JSON array of key-value pairs
  transferInfo    Json          // Stored as JSON object with delivery time and returns policy
  
  // Relations
  sellerId        Int
  seller          SellerProfile @relation(fields: [sellerId], references: [id])
  categoryId      Int
  category        Category      @relation(fields: [categoryId], references: [id])
  images          Image[]
  orders          Order[]
  reviews         Review[]
  favorites       Favorite[]
  
  // Stats
  views           Int           @default(0)
  sales           Int           @default(0)
  
  // Metadata
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

enum ListingStatus {
  DRAFT
  ACTIVE
  PENDING
  SOLD
  SUSPENDED
}

// Image model for listing images
model Image {
  id          Int       @id @default(autoincrement())
  url         String
  listingId   Int
  listing     Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  isMain      Boolean   @default(false)
  
  createdAt   DateTime  @default(now())
}

// Order model for transactions
model Order {
  id              Int           @id @default(autoincrement())
  orderNumber     String        @unique
  status          OrderStatus   @default(PENDING)
  totalAmount     Decimal       @db.Decimal(10, 2)
  platformFee     Decimal       @db.Decimal(10, 2)
  transactionFee  Decimal       @db.Decimal(10, 2)
  
  // Relations
  buyerId         Int
  buyer           User          @relation("Buyer", fields: [buyerId], references: [id])
  sellerId        Int
  seller          SellerProfile @relation("Seller", fields: [sellerId], references: [id])
  listingId       Int
  listing         Listing       @relation(fields: [listingId], references: [id])
  review          Review?
  
  // Payment info
  paymentMethod   String?
  paymentStatus   PaymentStatus @default(PENDING)
  
  // Delivery info
  deliveryMethod  String?
  deliveryStatus  String?
  
  // Timestamps
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  completedAt     DateTime?
}

enum OrderStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
}

// Review model for user feedback
model Review {
  id          Int           @id @default(autoincrement())
  rating      Int           @db.TinyInt // 1-5 stars
  comment     String?       @db.Text
  
  // Relations
  giverId     Int
  giver       User          @relation("ReviewGiver", fields: [giverId], references: [id])
  receiverId  Int
  receiver    SellerProfile @relation("ReviewReceiver", fields: [receiverId], references: [id])
  listingId   Int
  listing     Listing       @relation(fields: [listingId], references: [id])
  orderId     Int           @unique
  order       Order         @relation(fields: [orderId], references: [id])
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

// Message model for user communication
model Message {
  id          Int       @id @default(autoincrement())
  content     String    @db.Text
  isRead      Boolean   @default(false)
  
  // Relations
  senderId    Int
  sender      User      @relation("MessageSender", fields: [senderId], references: [id])
  receiverId  Int
  receiver    User      @relation("MessageReceiver", fields: [receiverId], references: [id])
  
  createdAt   DateTime  @default(now())
}

// Conversation model to group messages
model Conversation {
  id          Int       @id @default(autoincrement())
  user1Id     Int
  user2Id     Int
  lastMessage String?   @db.Text
  updatedAt   DateTime  @updatedAt
  
  @@unique([user1Id, user2Id])
}

// Favorite model for wishlists
model Favorite {
  id          Int       @id @default(autoincrement())
  userId      Int
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  listingId   Int
  listing     Listing   @relation(fields: [listingId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime  @default(now())
  
  @@unique([userId, listingId])
}

// Notification model for system alerts
model Notification {
  id          Int               @id @default(autoincrement())
  type        NotificationType
  title       String
  message     String            @db.Text
  isRead      Boolean           @default(false)
  
  // Relations
  userId      Int
  user        User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime          @default(now())
}

enum NotificationType {
  SYSTEM
  ORDER
  MESSAGE
  PAYMENT
  REVIEW
}

// Settings model for user preferences
model Settings {
  id                  Int       @id @default(autoincrement())
  userId              Int       @unique
  user                User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  emailNotifications  Boolean   @default(true)
  pushNotifications   Boolean   @default(true)
  marketingEmails     Boolean   @default(false)
  theme               String    @default("system")
  
  updatedAt           DateTime  @updatedAt
}
